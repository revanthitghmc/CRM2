const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  agentId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  
  // Personal Information
  personalInfo: {
    dateOfBirth: Date,
    gender: {
      type: String,
      enum: ['Male', 'Female', 'Other', 'Prefer not to say']
    },
    nationality: String,
    passportNumber: String,
    permanentAddress: {
      street: String,
      city: String,
      state: String,
      country: String,
      postalCode: String
    },
    currentAddress: {
      street: String,
      city: String,
      state: String,
      country: String,
      postalCode: String
    },
    emergencyContact: {
      name: String,
      relationship: String,
      phone: String,
      email: String
    }
  },

  // Educational Qualifications
  education: [{
    level: {
      type: String,
      enum: ['High School', 'Diploma', 'Bachelor\'s', 'Master\'s', 'PhD', 'Other']
    },
    institution: String,
    country: String,
    programName: String,
    yearPassed: Number,
    gradeType: {
      type: String,
      enum: ['GPA', 'Percentage', 'Grade', 'Other']
    },
    gradeValue: String,
    isHighest: {
      type: Boolean,
      default: false
    }
  }],

  // English Proficiency
  englishProficiency: {
    testType: {
      type: String,
      enum: ['IELTS', 'TOEFL', 'PTE', 'Duolingo', 'Other']
    },
    overallScore: String,
    sectionalScores: {
      listening: String,
      reading: String,
      writing: String,
      speaking: String
    },
    testDate: Date,
    reportNumber: String
  },

  // University Preferences
  preferences: {
    targetCountries: [String],
    preferredUniversities: [String],
    intendedPrograms: [String],
    intake: {
      type: String,
      enum: ['Fall', 'Spring', 'Summer']
    },
    year: Number
  },

  // Profile completion status
  profileCompletion: {
    personalInfo: { type: Boolean, default: false },
    education: { type: Boolean, default: false },
    englishTest: { type: Boolean, default: false },
    preferences: { type: Boolean, default: false },
    documents: { type: Boolean, default: false }
  },

  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

studentSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('Student', studentSchema);
